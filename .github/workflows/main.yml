name: Main Branch CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '17.0.9'
          distribution: 'adopt'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.3.0
        with:
          flutter-version: '3.16.5'

      - name: Install dependencies
        run: flutter pub get

      - name: Increment build number and set new version
        run: |
          version=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          echo "Current version: $version"
          IFS='+' read -r base_version build_number <<< "$version"
          build_number=$((build_number + 1))
          new_version="${base_version}+${build_number}"
          echo "New version: $new_version"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Decode iOS secrets
        env:
          P12_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_P12_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          DISTRIBUTION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_DISTRIBUTION_PROVISIONING_PROFILE_BASE64 }}
          LOCAL_NOTI_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_LOCAL_NOTIFICATION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_RUNNER_LOCAL_KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/ios_dist_pp.mobileprovision
          LOCAL_NOTIFICATION_PROFILE_PATH=$RUNNER_TEMP/ios_dist_noti_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTIONS_PATH="${{ github.workspace }}/ios/Runner/ExportOptions.plist"
          
          echo -n "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROVISIONING_PROFILE_PATH
          echo -n "$LOCAL_NOTI_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $LOCAL_NOTIFICATION_PROFILE_PATH
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 --decode -o $EXPORT_OPTIONS_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $LOCAL_NOTIFICATION_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      - name: Install private API key P8
        env:
          PRIVATE_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY_BASE64 }}
          API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8

      - name: Upload IPA to TestFlight
        env:
          API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          API_ISSUER: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: xcrun altool --upload-app --type ios -f /Users/idohyeong/Desktop/intermission-client/build/ios/ipa/인터미션.ipa --apiKey $API_KEY --apiIssuer $API_ISSUER


      - name: Decode Android Keystore
        run: |
          echo "${{ secrets.ANDROID_DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > $HOME/.android/debug.keystore
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > "${{ github.workspace }}/android/app/release-key.jks"

      - name: Build Android APK
        run: flutter build apk --release

      - name: Set APK file name with today's date
        run: echo "TODAYS_DATE=$(date +%y%m%d)" >> $GITHUB_ENV

      - name: Upload APK to Google Drive
        uses: willo32/google-drive-upload-action@v1
        with:
          credentials: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS }}
          target: ${{ github.workspace }}/build/app/outputs/flutter-apk/app-release.apk
          parent_folder_id: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          name: app_${{ env.TODAYS_DATE }}.apk
